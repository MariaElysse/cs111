NAME: Maria E.V. Neptune
EMAIL: jerenept@gmail.com
ID: 004-665-056

Important notes: there are several useful make recipes, in addition to the mandatory ones:

1. testing: used macros to set up a logging framework, erasing the old log in the process.
2. release: builds a binary without debugging symbols (this is used for the dist recipe, but not the default)
3. debug: builds the binary with debugging symbols and runs the debugger
4. run: ensures the binary is updated and runs it

Also note: the dist recipe will fail if any of the required components to be submitted (as well as my and Prof. Kampe's separate testing scripts) are not present. 

Included Files:  
* README: This file. Gives an overview of what is included and information on how the program was created and tested  
* Makefile: a make file containing recipes that help streamline common operations on the project: building the binary (for release as well as debugging, running the smoke tests, removing products from the directory, creating a tar file for distribution, etc.  
* lab1a.c: the C code of my submitted program.  
* P1A_check.sh: Professor Kampe's tests for the project.  
* test.c, test.h: set up a testing framework for one of the functions, sanitize_crlf  

Features:  
* All features noted in the Project 1A specification were implemented.  

Resources used:
GNU Make Manual (https://gnu.org/software/make/manual/make.html)
GNU C Library: Using Getopt (https://www.gnu.org/software/libc/manual/html_node/Using-Getopt.html)
Getopt code segfaults when compiling with -O3 on OS X Mavericks - Stack Overflow (http://stackoverflow.com/questions/19915544/getopt-code-segfaults-when-compiling-with-o3-on-os-x-mavericks)
Linux Signals â€“ Example C Program to Catch Signals (SIGINT, SIGKILL, SIGSTOP, etc.)(http://www.thegeekstuff.com/2012/03/catch-signals-sample-c-code/)i
gdb cheat sheet that I got from Prof. Reinman during CS33
The Linux Programmer Guide, Chapter 6 (Pipes) 


